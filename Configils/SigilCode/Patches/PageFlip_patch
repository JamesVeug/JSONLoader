// Using Inscryption
using UnityEngine;
using DiskCardGame;

// Modding Inscryption
using APIPlugin;

using System.Collections;
using System.Collections.Generic;
using System.IO; // Loading Sigil and Card art.
using System.Linq;
using HarmonyLib;

namespace Sigil_Creator
{
	[HarmonyPatch(typeof(RuleBookController), "OpenToAbilityPage")]
	public class PageFlip_patch
	{
		// Token: 0x06000038 RID: 56 RVA: 0x00003178 File Offset: 0x00001378
		[HarmonyPostfix]
		public static bool Prefix(string abilityName, PlayableCard card, bool immediate = false)
		{
			Singleton<RuleBookController>.Instance.SetShown(true, Singleton<RuleBookController>.Instance.OffsetViewForCard(card));
			int pageIndex = Singleton<RuleBookController>.Instance.PageData.IndexOf(Singleton<RuleBookController>.Instance.PageData.Find((RuleBookPageInfo x) => x.abilityPage && x.pageId == abilityName));
			Plugin.Log.LogInfo(abilityName);
			int checkforsigil = Singleton<RuleBookController>.Instance.PageData.IndexOf(Singleton<RuleBookController>.Instance.PageData.Find((RuleBookPageInfo x) => x.abilityPage && x.pageId == abilityName));
			if (checkforsigil == -1)
            {
				pageIndex = HasRuleBookNameIfSoSetToPageIndex("Host", abilityName);
			}
			Singleton<RuleBookController>.Instance.StopAllCoroutines();
			Singleton<RuleBookController>.Instance.StartCoroutine(Singleton<RuleBookController>.Instance.flipper.FlipToPage(pageIndex, immediate ? 0f : 0.2f));
			return false;
		}

		public static int HasRuleBookNameIfSoSetToPageIndex(string RuleBookName, string abilityName)
		{
			var abilities = ScriptableObjectLoader<AbilityInfo>.AllData;
			List<AbilityInfo> sigils = abilities.FindAll((AbilityInfo x) => x.rulebookName == RuleBookName);
			foreach (AbilityInfo sigil in sigils)
			{
				if (sigil.ability.ToString() == abilityName)
				{
					return Singleton<RuleBookController>.Instance.PageData.IndexOf(Singleton<RuleBookController>.Instance.PageData.Find((RuleBookPageInfo x) => x.abilityPage && x.pageId == sigils[0].ability.ToString()));
				}
			}
			return -1;
		}
	}
}
