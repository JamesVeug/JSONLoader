// Using Inscryption
using UnityEngine;
using DiskCardGame;

// Modding Inscryption
using APIPlugin;

using System.Collections;
using System.Collections.Generic;
using System.IO; // Loading Sigil and Card art.
using System;
using System.Linq;
using System.Text.RegularExpressions;
using JLPlugin.Data;



namespace JLPlugin.SigilCode
{
	using Utils;

	public class Add_Sigil_OnStrike : ConfigurableBase
	{
		private CardModificationInfo mod = new CardModificationInfo();
		public Ability ability;

		public override Ability Ability
		{
			get
            { 
				return ability;
			}
		}

		public override bool RespondsToDealDamage(int amount, PlayableCard target)
		{
			return !target.Dead;
		}

		// Token: 0x060001B9 RID: 441 RVA: 0x00007CEE File Offset: 0x00005EEE
		public override IEnumerator OnDealDamage(int amount, PlayableCard target)
		{
			if (target != null)
			{
				foreach (Ability sigil in ability_list)
                {
                    List<Ability> sigillist = SigilData.GetAllAbilities(sigil);

                    foreach (Ability appliedsigil in sigillist)
                    {

                        Singleton<ViewManager>.Instance.SwitchToView(View.Board, false, true);
						yield return new WaitForSeconds(0.1f);
						base.Card.Anim.LightNegationEffect();
						yield return base.PreSuccessfulTriggerSequence();

						mod = new CardModificationInfo();
						mod.abilities = new List<Ability>() { appliedsigil };

						if (target.Info.mods == null)
						{
							target.AddTemporaryMod(mod);
							target.RenderCard();

						}
						else if (!target.Info.mods.Contains(mod))
						{
							target.AddTemporaryMod(mod);
							target.RenderCard();
						}

						if (target.Health <= 0)
						{
							yield return target.Die(false, base.Card, true);
						}
						yield return new WaitForSeconds(0.1f);
						yield return base.LearnAbility(0.1f);
						Singleton<ViewManager>.Instance.Controller.LockState = ViewLockState.Unlocked;
					}
				}
			}
			yield break;
		}
	}
}