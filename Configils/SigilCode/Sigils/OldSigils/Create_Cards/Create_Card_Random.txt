// Using Inscryption
using DiskCardGame;
using JLPlugin.Data;
using System;
// Modding Inscryption
using System.Collections;
using System.Collections.Generic;
using UnityEngine;


namespace JLPlugin.SigilCode
{

    public class Create_Card_Random : ConfigurableBase
    {
        public static Ability ability;

        public override Ability Ability
        {
            get
            {
                return ability;
            }
        }

        public override bool RespondsToTurnEnd(bool playerTurnEnd)
        {
            return base.Card != null && base.Card.OpponentCard != playerTurnEnd && base.Card.OnBoard;
        }

        // Token: 0x06000082 RID: 130 RVA: 0x000040BC File Offset: 0x000022BC
        public override IEnumerator OnTurnEnd(bool playerTurnEnd)
        {
            yield return new WaitForSeconds(0.3f);
            Singleton<ViewManager>.Instance.SwitchToView(View.Board, false, false);
            yield return new WaitForSeconds(0.3f);

            foreach (Ability sigil in ability_list)
            {
                List<String> placecards = SigilData.GetArgument<List<String>>(sigil, "cards");
                Plugin.Log.LogInfo(placecards[0]);
                foreach (String placecard in placecards)
                {
                    CardInfo SpecifiedCardInfo = CardLoader.AllData.Find(info => info.name == placecard);
                    CardSlot slot = SigilData.GetSlots(sigil, base.Card.Slot)[0];
                    Plugin.Log.LogInfo(slot.Index);

                    if (SpecifiedCardInfo != null)
                    {
                        yield return Singleton<BoardManager>.Instance.CreateCardInSlot(SpecifiedCardInfo, slot, 0.1f, true);
                    }
                    else
                    {
                        yield return Singleton<BoardManager>.Instance.CreateCardInSlot(CardLoader.AllData.Find(info => info.name == "Squirrel"), slot, 0.1f, true);
                    }
                }
            }
            yield return new WaitForSeconds(0.3f);
            Singleton<ViewManager>.Instance.SwitchToView(View.Default, false, false);
            yield break;
        }
    }
}