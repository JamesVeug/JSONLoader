// Using Inscryption
using UnityEngine;
using DiskCardGame;

// Modding Inscryption
using APIPlugin;

using System.Collections;
using System.Collections.Generic;
using System.IO; // Loading Sigil and Card art.
using System;
using System.Linq;
using System.Text.RegularExpressions;
using JLPlugin.Data;


namespace JLPlugin.SigilCode
{

	public class Draw_Card_Strike : ConfigurableBase
	{
		public Ability ability;

		public override Ability Ability
		{
			get
            { 
				return ability;
			}
		}

		// Token: 0x060013ED RID: 5101 RVA: 0x0000F57E File Offset: 0x0000D77E
		public override bool RespondsToDealDamage(int amount, PlayableCard target)
		{
			return true;
		}

		// Token: 0x060001B9 RID: 441 RVA: 0x00007CEE File Offset: 0x00005EEE
		public override IEnumerator OnDealDamage(int amount, PlayableCard target)
		{
			if (target != null)
            {
				if (Singleton<ViewManager>.Instance.CurrentView != View.Default)
				{
					yield return new WaitForSeconds(0.2f);
					Singleton<ViewManager>.Instance.SwitchToView(View.Default, false, false);
					yield return new WaitForSeconds(0.2f);
				}

				foreach (Ability sigil in ability_list)
				{
					List<String> givecards = SigilData.GetArgument<List<String>>(sigil, "cards");
					foreach (String givecard in givecards)
					{
						CardInfo SpecifiedCardInfo = CardLoader.GetCardByName(givecard);

						if (SpecifiedCardInfo != null)
						{
							yield return Singleton<CardSpawner>.Instance.SpawnCardToHand(SpecifiedCardInfo, new List<CardModificationInfo>(), new Vector3(0f, 0f, 0f), 0, null);
						}
						else
						{
							yield return Singleton<CardSpawner>.Instance.SpawnCardToHand(CardLoader.AllData.Find(info => info.name == "RingWorm"), new List<CardModificationInfo>(), new Vector3(0f, 0f, 0f), 0, null);
						}
					}
				}
				yield break;
			}
		}
	}
}