// Using Inscryption
using UnityEngine;
using DiskCardGame;

// Modding Inscryption
using APIPlugin;

using System.Collections;
using System.Collections.Generic;
using System.IO; // Loading Sigil and Card art.
using System;
using System.Linq;
using System.Text.RegularExpressions;
using JLPlugin.Data;
using Random = System.Random;


namespace JLPlugin.SigilCode
{
	using Utils;

	public class Custom_Amorphous : ConfigurableBase
	{
		public Ability ability;

		public override Ability Ability
		{
			get
			{
				return ability;
			}
		}

		// Token: 0x0600003D RID: 61 RVA: 0x00004A88 File Offset: 0x00002C88
		public override bool RespondsToDrawn()
		{
			return true;
		}

		// Token: 0x0600003E RID: 62 RVA: 0x00004A9B File Offset: 0x00002C9B
		public override IEnumerator OnDrawn()
		{
			if (SaveManager.SaveFile.IsPart1)
            {
				(Singleton<PlayerHand>.Instance as PlayerHand3D).MoveCardAboveHand(base.Card);
				yield return base.Card.FlipInHand(new Action(this.AddMod));
			} else
            {
				AddMod();
			}
			yield return base.LearnAbility(0.5f);
			yield break;
		}

		// Token: 0x0600003F RID: 63 RVA: 0x00004AAC File Offset: 0x00002CAC
		private void AddMod()
        {
			foreach (Ability sigil in ability_list)
            {
				base.Card.Status.hiddenAbilities.Add(sigil);
				List<Ability> sigillist = SigilData.GetAllAbilities(sigil);

				foreach (Ability ability in sigillist)
				{
					CardModificationInfo cardModificationInfo = new CardModificationInfo(ability);
					CardModificationInfo cardModificationInfo2 = base.Card.TemporaryMods.Find((CardModificationInfo x) => x.HasAbility(this.Ability));
					bool flag = cardModificationInfo2 == null;
					if (flag)
					{
						cardModificationInfo2 = base.Card.Info.Mods.Find((CardModificationInfo x) => x.HasAbility(this.Ability));
					}
					bool flag2 = cardModificationInfo2 != null;
					if (flag2)
					{
						cardModificationInfo.fromTotem = cardModificationInfo2.fromTotem;
						cardModificationInfo.fromCardMerge = cardModificationInfo2.fromCardMerge;
					}
					base.Card.AddTemporaryMod(cardModificationInfo);
				}
			}
			base.Card.RenderCard();
		}
	}
}